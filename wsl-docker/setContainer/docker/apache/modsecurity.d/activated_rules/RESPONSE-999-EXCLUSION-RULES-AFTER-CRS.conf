# ------------------------------------------------------------------------
# OWASP ModSecurity Core Rule Set ver.3.3.2
# Copyright (c) 2006-2020 Trustwave and contributors. All rights reserved.
#
# The OWASP ModSecurity Core Rule Set is distributed under
# Apache Software License (ASL) version 2
# Please see the enclosed LICENSE file for full details.
# ------------------------------------------------------------------------

#
# The purpose of this file is to hold LOCAL exceptions for your site.
# The types of rules that would go into this file are one where you want
# to unconditionally disable rules or modify their actions during startup.
#
# Please see the file REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf.example
# for a description of the rule exclusions mechanism and the correct
# use of this file.
#

#
# Example Exclusion Rule: To unconditionally disable a rule ID
#
# ModSecurity Rule Exclusion: 942100 SQL Injection Detected via libinjection
# SecRuleRemoveById 942100

# modsecurity.conf
SecRuleRemoveById 200003

# REQUEST-921-PROTOCOL-ATTACK.conf
SecRuleRemoveById 921110

# REQUEST-920-PROTOCOL-ENFORCEMENT.conf
SecRuleRemoveById 920270
SecRuleRemoveById 921130
SecRuleRemoveById 920350
SecRuleRemoveById 920470
SecRuleRemoveById 920180
SecRuleRemoveById 920120

# REQUEST-930-APPLICATION-ATTACK-LFI.conf
# 나중에 다시 주석해제 필요함
SecRuleRemoveById 930110
SecRuleRemoveById 930100

# REQUEST-930-APPLICATION-ATTACK-LFI.conf
SecRuleRemoveById 932100
SecRuleRemoveById 932105
SecRuleRemoveById 932110
SecRuleRemoveById 932115
SecRuleRemoveById 932120
SecRuleRemoveById 932130
SecRuleRemoveById 932140
SecRuleRemoveById 932150

# REQUEST-933-APPLICATION-ATTACK-PHP.conf
SecRuleRemoveById 933160
SecRuleRemoveById 933210
SecRuleRemoveById 933150
SecRuleRemoveById 933100

# REQUEST-941-APPLICATION-ATTACK-XSS.conf
SecRuleRemoveById 941100
SecRuleRemoveById 941160
SecRuleRemoveById 941310
SecRuleRemoveById 941120
SecRuleRemoveById 941140
SecRuleRemoveById 941180
SecRuleRemoveById 941110
SecRuleRemoveById 941190
SecRuleRemoveById 941170
SecRuleRemoveById 941210
SecRuleRemoveById 941370
SecRuleRemoveById 941130
SecRuleRemoveById 941270
SecRuleRemoveById 941250
SecRuleRemoveById 941260
SecRuleRemoveById 941300
SecRuleRemoveById 941230
SecRuleRemoveById 941280

# REQUEST-942-APPLICATION-ATTACK-SQLI.conf
SecRuleRemoveById 942170
SecRuleRemoveById 942190
SecRuleRemoveById 942240
SecRuleRemoveById 942360
SecRuleRemoveById 942100
SecRuleRemoveById 942230
SecRuleRemoveById 942220

# REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION.conf
SecRuleRemoveById 943100

# RESPONSE-953-DATA-LEAKAGES-PHP.conf
SecRuleRemoveById 953100
SecRuleRemoveById 953120

# REQUEST-931-APPLICATION-ATTACK-RFI.conf
SecRuleRemoveById 931100

# Example Exclusion Rule: Remove a group of rules
#
# ModSecurity Rule Exclusion: Disable PHP injection rules
# SecRuleRemoveByTag "attack-injection-php"
SecRuleRemoveByTag "attack-injection-nodejs"
SecRuleRemoveByTag "language-java"

#
# Example Exclusion Rule: To unconditionally remove parameter "foo" from
#                         inspection for SQLi rules
#
# ModSecurity Rule Exclusion: disable sqli rules for parameter foo.
# SecRuleUpdateTargetByTag "attack-sqli" "!ARGS:foo"


# -- [[ Changing the Disruptive Action for Anomaly Mode ]] --
#
# In Anomaly Mode (default in CRS3), the rules in REQUEST-949-BLOCKING-EVALUATION.conf
# and RESPONSE-959-BLOCKING-EVALUATION.conf check the accumulated attack scores
# against your policy. To apply a disruptive action, they overwrite the default
# actions specified in SecDefaultAction (setup.conf) with a 'deny' action.
# This 'deny' is by default paired with a 'status:403' action.
#
# In order to change the disruptive action from 'deny' to something else,
# you must use SecRuleUpdateActionByID directives AFTER the CRS rules
# are configured, for instance in the RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf file.
#
# These actions only apply when using Anomaly Mode.
#
# Default action: block with error 403
# (No configuration needed in this file if you want the default behavior.)
#

# Example: redirect back to the homepage on blocking
#
# SecRuleUpdateActionById 949110 "t:none,redirect:'http://%{request_headers.host}/'"
# SecRuleUpdateActionById 959100 "t:none,redirect:'http://%{request_headers.host}/'"

# Example: redirect to another URL on blocking
#
# SecRuleUpdateActionById 949110 "t:none,redirect:'http://example.com/report_problem'"
# SecRuleUpdateActionById 959100 "t:none,redirect:'http://example.com/report_problem'"

# Example: send an error 404
#
# SecRuleUpdateActionById 949110 "t:none,deny,status:404"
# SecRuleUpdateActionById 959100 "t:none,deny,status:404"

# Example: drop the connection (best for DoS attacks)
#
# SecRuleUpdateActionById 949110 "t:none,drop"
# SecRuleUpdateActionById 959100 "t:none,drop"
